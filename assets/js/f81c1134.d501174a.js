"use strict";(self.webpackChunkdiedumb=self.webpackChunkdiedumb||[]).push([[8130],{7735:a=>{a.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"romusha-bukan-mi-instan-tapi-dsl-rasa-premium","metadata":{"permalink":"/blog/romusha-bukan-mi-instan-tapi-dsl-rasa-premium","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-06-20-romusha-dsl/index.mdx","source":"@site/blog/2025-06-20-romusha-dsl/index.mdx","title":"Romusha, Bukan Mi Instan, Tapi DSL Rasa Premium","description":"Apa itu Romusha (DSL)?","date":"2025-06-20T00:00:00.000Z","tags":[{"inline":false,"label":"github","permalink":"/blog/tags/github","description":"Catatan tentang Repository Github"}],"readingTime":1.81,"hasTruncateMarker":false,"authors":[{"name":"Ibnul Mutaki","title":"Senior Programmer @ Elite Strategic","url":"https://github.com/cacing69","page":{"permalink":"/blog/authors/cacing-69"},"socials":{"github":"https://github.com/cacing69","linkedin":"https://www.linkedin.com/in/ibnul-mutaki/"},"imageURL":"https://github.com/cacing69.png","key":"cacing69"}],"frontMatter":{"slug":"romusha-bukan-mi-instan-tapi-dsl-rasa-premium","title":"Romusha, Bukan Mi Instan, Tapi DSL Rasa Premium","authors":["cacing69"],"tags":["github"],"date":"2025-06-20T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"Belajar RegEx Dasar","permalink":"/blog/belajar-regex-dasar"}},"content":"## Apa itu Romusha (DSL)?\\n\\n> \\"Kalau logika bisa ditulis seperti nulis resep \u2014 gampang, jelas, dan bisa diwariskan \u2014 kenapa harus ribet?\\"\\n\\nBayangkan kamu punya otak kedua yang bisa kamu kasih instruksi, dan dia akan ngerjain semua langkah logika tanpa perlu kamu repot mikir syntax aneh-aneh.\\nNah, itulah Romusha \u2014 Domain Specific Language (DSL) berbasis JSON yang sedang kami racik dengan penuh cinta.\\n\\nRomusha bukan framework. Bukan bahasa pemrograman baru. Tapi dia semacam \\"logika yang bisa dibaca siapa aja dan jalan di mana aja\\".\\n\\n## Tujuannya Apa?\\n\\nSaya ingin logika bisa ditulis:\\n\\n- Secara declarative (nggak ribet ngurus if, for, atau nesting)\\n- Dalam bentuk JSON yang portable (bisa dikirim, disimpan, disuntikkan ke sistem lain)\\n- Modular kayak Lego \u2014 bisa disusun, dipisah, dan disambungin lagi\\n- Tanpa harus bikin interpreter dari nol\\n- Bisa jalan di JS, PHP, atau bahkan browser tanpa plugin aneh-aneh\\n\\n### Contoh Singkat:\\n```json\\n{\\n  \\"steps\\": [\\n    {\\n      \\"call\\": {\\n        \\"fn\\": \\"fetchUser\\",\\n        \\"args\\": [ { \\"value\\": 1 } ],\\n        \\"injectAs\\": \\"user\\"\\n      }\\n    },\\n    {\\n      \\"call\\": {\\n        \\"fn\\": \\"print\\",\\n        \\"args\\": [ { \\"var\\": \\"user.name\\" } ]\\n      }\\n    }\\n  ]\\n}\\n```\\n\\nBacannya: ambil `user` dengan ID `7` \u2192 simpan sebagai `user` \u2192 tampilkan `user.name`.\\n\\n## Status Sekarang\\n\\nRomusha masih dalam tahap:\\n\\n- Rancang bangun struktur DSL (udah jadi, rapi banget!)\\n- Eksperimen evaluator awal (lagi ngulik di JavaScript dulu)\\n- Sketsa playground dan CLI (biar kamu bisa main langsung)\\n- Siap-siap bikin plugin seru (http.get, sum, print, dst.)\\n\\n## Rencana Masa Depan\\n\\n- Evaluator lintas bahasa\\n- Dukungan with, pipe, switch, define, repeat, dan teman-temannya\\n- Skema validator biar bisa auto-check DSL kamu\\n- Playground web yang bisa klik-run kayak ngetes kode\\n\\n### Kenapa Namanya Romusha?\\n\\nBukan sembarang pekerja. Romusha siap menjalankan logika yang kamu berikan \u2014 tanpa lelah, tanpa protes. Ia bekerja di balik layar, membaca struktur JSON yang kadang dalam, kadang aneh, kadang bercabang lima seperti akar pohon.\\n\\nDia mengurai instruksi, memahami konteks, mengeksekusi satu per satu, dan menjaga alur tetap konsisten. Tidak butuh UI mewah. Tidak minta gaji. Hanya butuh struktur data yang jelas.\\n\\n> Romusha tidak menulis kode. Tapi ia mengeksekusi logika yang kamu tulis \u2014 dengan disiplin dan ketekunan seperti pekerja yang mengerti tanggung jawabnya.\\n\\nMakanya, dia layak menyandang nama Romusha \u2014 sang eksekutor logika sejati.\\n\\nSpoiler : CTA Mode\\n\\n> Bergabunglah, beri ide, atau cukup amati dan tunggu saya dan orang-orang lain bangun fondasinya. Romusha akan menjadi pekerja logika universal.\\n\\n[Repository Romusha](https://github.com/cacing69/romusha)"},{"id":"belajar-regex-dasar","metadata":{"permalink":"/blog/belajar-regex-dasar","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-04-11-belajar-regex-dasar/index.mdx","source":"@site/blog/2025-04-11-belajar-regex-dasar/index.mdx","title":"Belajar RegEx Dasar","description":"RegEx","date":"2025-04-11T00:00:00.000Z","tags":[{"inline":false,"label":"regex","permalink":"/blog/tags/regex","description":"Catatan tentang RegEx"}],"readingTime":1,"hasTruncateMarker":true,"authors":[{"name":"Ibnul Mutaki","title":"Senior Programmer @ Elite Strategic","url":"https://github.com/cacing69","page":{"permalink":"/blog/authors/cacing-69"},"socials":{"github":"https://github.com/cacing69","linkedin":"https://www.linkedin.com/in/ibnul-mutaki/"},"imageURL":"https://github.com/cacing69.png","key":"cacing69"}],"frontMatter":{"slug":"belajar-regex-dasar","title":"Belajar RegEx Dasar","authors":["cacing69"],"tags":["regex"],"date":"2025-04-11T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Romusha, Bukan Mi Instan, Tapi DSL Rasa Premium","permalink":"/blog/romusha-bukan-mi-instan-tapi-dsl-rasa-premium"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"## RegEx\\n\\n**Regex** (atau *Regular Expression* ) adalah sebuah pola pencocokan teks yang digunakan untuk mencari, memvalidasi, atau mengganti bagian dari string berdasarkan pola tertentu.\\n\\n{/*truncate*/}\\n\\nRegex sangat berguna dalam pemrograman dan pengolahan data karena memungkinkan kita untuk menemukan teks yang sesuai dengan kriteria tertentu tanpa harus mengetikkan setiap kemungkinan secara manual.\\n\\n### Komponen Dasar Regex\\n\\n1. `Literal Karakter` : Ini adalah karakter biasa yang dicocokkan secara langsung. Misalnya, regex `abc` akan cocok dengan string `\\"abc\\"`.\\n\\n2. `Metakarakter` : Ini adalah simbol-simbol khusus yang memiliki arti tersendiri dalam regex. Beberapa metakarakter umum meliputi:\\n\\n    - `.`: Cocok dengan karakter apa saja (kecuali newline).\\n    - `*`: Mengulang elemen sebelumnya nol kali atau lebih.\\n    - `+`: Mengulang elemen sebelumnya satu kali atau lebih.\\n    - `?`: Membuat elemen sebelumnya opsional (muncul nol atau satu kali).\\n    - `[]`: Mendefinisikan kelas karakter (misalnya [abc] akan cocok dengan salah satu karakter \'a\', \'b\', atau \'c\').\\n    - `|`: Operator OR, memilih antara dua pola (contoh: a|b akan cocok dengan \'a\' atau \'b\').\\n    - `^` dan `$`: Simbol ini menandakan awal `(^)` dan akhir `($)` dari sebuah baris atau string.\\n\\n3. `Kuantifikasi` : Kita bisa mengontrol berapa banyak kecocokan yang diinginkan dengan menggunakan operator seperti `{n}`, `{n,m}` (untuk rentang), dll.\\n\\n4. `Grup dan Referensi` : Anda dapat mengelompokkan pola bersama-sama menggunakan tanda kurung `()` dan merujuk pada kelompok tersebut nantinya."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-04-10-welcome/index.mdx","source":"@site/blog/2025-04-10-welcome/index.mdx","title":"Welcome","description":"Ini adalah catatan komponen basic","date":"2025-04-10T00:00:00.000Z","tags":[{"inline":false,"label":"note","permalink":"/blog/tags/note","description":"Simple random note"}],"readingTime":0.83,"hasTruncateMarker":true,"authors":[{"name":"Ibnul Mutaki","title":"Senior Programmer @ Elite Strategic","url":"https://github.com/cacing69","page":{"permalink":"/blog/authors/cacing-69"},"socials":{"github":"https://github.com/cacing69","linkedin":"https://www.linkedin.com/in/ibnul-mutaki/"},"imageURL":"https://github.com/cacing69.png","key":"cacing69"}],"frontMatter":{"slug":"welcome","title":"Welcome","description":"Ini adalah catatan komponen basic","authors":["cacing69"],"tags":["note"],"date":"2025-04-10T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Belajar RegEx Dasar","permalink":"/blog/belajar-regex-dasar"}},"content":"Ini adalah catatan pertama saya di docusaurus, repo ini akan saya jadikan tempat untuk merangkum hasil temuan saya, baik itu dalam bentuk video, hasil eksperimen, hasil dari rangkuman nonton video, maupun opini tentang sesuatu.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Catatan bawaan dari docusaurus\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n:::\\n\\nUse a `\x3c!--` `truncate` `--\x3e` or `{/* truncate */}` comment to limit blog post size in the list view.\\n\\nFor example, use JSX to create an interactive button:\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config.\\n\\nTambahkan plugin `@docusaurus/plugin-sitemap` di `docusaurus.config.js`:\\n```javascript\\nplugins: [\\n  \'@docusaurus/plugin-sitemap\',\\n],"}]}}')}}]);